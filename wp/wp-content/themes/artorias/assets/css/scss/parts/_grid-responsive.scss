/* ==========================================================================
   11.0 Grid responsive styles
   ========================================================================== */

.qodef-content-grid {
	
	@each $key, $values in $content-grid-width-responsive-map {
		
		@media only screen and (max-width: map-deep-get($content-grid-width-responsive-map, $key, 'responsive-break')) {
			width: map-deep-get($content-grid-width-responsive-map, $key, 'content-grid-width');
			
			&.qodef-extended-grid--right {
				padding-left: calc((100% - #{map-deep-get($content-grid-width-responsive-map, $key, 'content-grid-width')})/2);
			}
			
			&.qodef-extended-grid--left {
				padding-right: calc((100% - #{map-deep-get($content-grid-width-responsive-map, $key, 'content-grid-width')})/2);
			}
			
			.qodef--boxed & {
				width: calc(#{map-deep-get($content-grid-width-responsive-map, $key, 'content-grid-width')} + #{2 * $boxed-grid-padding-size});
			}
		}
	}
}

.qodef-grid {
	
	&.qodef-responsive--predefined {
		
		@each $key, $values in $grid-columns-layout-responsive-map {
			
			@media only screen and (max-width: map-deep-get($grid-columns-layout-responsive-map, $key, 'responsive-stage')) {
				
				@each $column in map-deep-get($grid-columns-layout-responsive-map, $key, 'columns-label') {
					
					&.qodef-col-num--#{$column} {
						$responsive-break: map-deep-get($grid-columns-layout-responsive-map, $key, 'responsive-break');
						$column-size: map-deep-get($grid-columns-layout-responsive-map, $key, 'columns-size');
						$custom-columns-responsive: map-deep-get($grid-columns-layout-responsive-map, $key, 'custom-columns-responsive');
						
						@if ($custom-columns-responsive != null) {
							
							@if (index(map_get($custom-columns-responsive, 'custom-columns-label'), $column) != null) {
								$column-size: map_get($custom-columns-responsive, 'custom-columns-size');
							}
						}
						
						$column-width: 100% / $column-size;
						
						&.qodef-layout--columns {
							
							> .qodef-grid-inner > .qodef-grid-item {
								width: $column-width;
								
								@if ($responsive-break != 0) {
									
									@media only screen and (min-width: $responsive-break) {
										
										&:nth-child(#{$column-size}n+1) {
											clear: both;
										}
									}
								}
							}
						}
						
						&.qodef-layout--masonry {
							
							.qodef-grid-masonry-sizer,
							> .qodef-grid-inner > .qodef-grid-item {
								width: $column-width;
							}
							
							> .qodef-grid-inner > .qodef-item--landscape,
							> .qodef-grid-inner > .qodef-item--huge-square {
								
								@if ($column-size != 1) {
									width: $column-width*2;
								} @else {
									width: $column-width;
								}
							}
						}
					}
				}
			}
		}
	}
	
	&.qodef-responsive--custom {
		
		@each $key, $values in $grid-columns-layout-custom-responsive-map {
			
			@media only screen and (max-width: map-deep-get($grid-columns-layout-custom-responsive-map, $key, 'responsive-stage')) {
				
				@for $j from 0 to $grid-columns-layout-size {
					$step: $j + 1;
					
					$responsive-break: map-deep-get($grid-columns-layout-custom-responsive-map, $key, 'responsive-break');
					$columns-label: map-deep-get($grid-columns-layout-custom-responsive-map, $key, 'columns-label');
					$column-width: 100% / $step;
					
					&.qodef-layout--template {
						
						> .qodef-grid-inner > .qodef-grid-item {
							
							@for $i from 12 to 0 {
								
								&.qodef--#{$columns-label}-col-#{$i} {
									
									@media only screen and (min-width: $responsive-break) {
										width: 100%/(12/$i);
									}
								}
							}
						}
					}
					
					&.qodef-col-num--#{$columns-label}--#{$step} {
						
						&.qodef-layout--columns {
							
							> .qodef-grid-inner > .qodef-grid-item {
								
								@media only screen and (min-width: $responsive-break) {
									width: $column-width;
									
									@if ($responsive-break != 0 and $step > 1) {
										
										&:nth-child(#{$step}n+1) {
											clear: both;
										}
									}
								}
							}
						}
						
						&.qodef-layout--masonry {
							
							.qodef-grid-masonry-sizer,
							> .qodef-grid-inner > .qodef-grid-item {
								width: $column-width;
							}
							
							> .qodef-grid-inner > .qodef-item--landscape,
							> .qodef-grid-inner > .qodef-item--huge-square {
								
								@if ($step > 1) {
									width: $column-width*2;
								} @else {
									width: $column-width;
								}
							}
						}
					}
				}
			}
		}
	}
	
	@include qodefScreenSize1440 {
		
		@for $i from 0 to length($grid-columns-gutter-responsive-label) {
			&.qodef-gutter--#{nth($grid-columns-gutter-responsive-label,$i+1)} {
				$gutter-size: nth($grid-columns-gutter-responsive-size, $i+1);
				$gutter-double-size: $gutter-size * 2;
				
				&.qodef--no-bottom-space {
					margin-bottom: -#{$gutter-double-size}px;
				}
				
				> .qodef-grid-inner {
					margin: 0 -#{$gutter-size}px;
					
					> .qodef-grid-item {
						padding: 0 #{$gutter-size}px;
						margin: 0 0 #{$gutter-double-size}px;
					}
				}
			}
		}
	}
}

/* ==========================================================================
   Grid System responsive style - end
   ========================================================================== */
