/* ==========================================================================
   7.0 Grid styles
   ========================================================================== */

.qodef-content-grid {
	width: $content-grid-width-1100;
	margin: 0 auto;

	&.qodef-extended-grid {

		&:not([class*="qodef-extended-grid-disabled--"]) {
			width: 100% !important; // important is require in order to override responsive width
			margin: 0;
		}

		@each $key, $value in $grid-columns-layout-responsive-map {

			&.qodef-extended-grid-disabled--#{$key} {

				@media only screen and (min-width: #{($key + 1)}#{px}) {
					width: 100% !important; // important is require in order to override responsive width
					margin: 0;
				}

				@media only screen and (max-width: $key#{px}) {
					padding-left: 0 !important;
					padding-right: 0 !important;
				}
			}
		}
	}

	&.qodef-extended-grid--right {
		padding-left: calc((100% - #{$content-grid-width-1100})/2);
	}

	&.qodef-extended-grid--left {
		padding-right: calc((100% - #{$content-grid-width-1100})/2);
	}

	.qodef--boxed & {
		width: $content-grid-width-1100 + 2 * $boxed-grid-padding-size;
	}

	@each $key, $values in $content-grid-width-map {

		@media only screen and (min-width: map-deep-get($content-grid-width-map, $key, 'responsive-break')) {

			.qodef-content-grid-#{$key} & {
				width: map-deep-get($content-grid-width-map, $key, 'content-grid-width');

				&.qodef-extended-grid--right {
					padding-left: calc((100% - #{map-deep-get($content-grid-width-map, $key, 'content-grid-width')})/2);
				}

				&.qodef-extended-grid--left {
					padding-right: calc((100% - #{map-deep-get($content-grid-width-map, $key, 'content-grid-width')})/2);
				}

				@at-root .qodef--boxed#{&} {
					width: map-deep-get($content-grid-width-map, $key, 'content-grid-width') + 2 * $boxed-grid-padding-size;
				}
			}
		}
	}
}

.qodef-grid {
	@include qodefRelativeLayout();

	> .qodef-grid-inner {
		margin: 0 -#{$default-grid-gutter-size}px;

		> .qodef-grid-item {
			padding: 0 #{$default-grid-gutter-size}px;
		}
	}

	.qodef-grid-item {
		@include qodefRelativeLayout();
		min-height: 1px;
		float: left;
	}

	&.qodef-layout--template {

		> .qodef-grid-inner  {

			> .qodef-grid-item {

				@for $i from 12 to 0 {
					$column-width: 100%/(12/$i);

					// @if (index($grid-templates-specific-columns, $i) != null) {
					// 	$column-width: 100% / nth($grid-templates-specific-columns, index($grid-templates-specific-columns, $i));
					// }

					@media only screen and (min-width: $screen-size-1025) {

						&.qodef-col--#{$i} {
							width: $column-width;
						}

						&.qodef-col-push--#{$i} {
							left: $column-width;
						}

						&.qodef-col-pull--#{$i} {
							right: $column-width;
						}
					}
				}
			}
		}
	}

	&.qodef-layout--columns {

		@for $i from 0 to $grid-columns-layout-size {
			$step: $i + 1;

			&.qodef-col-num--#{$step} {
				$column-width: 100%/$step;

				> .qodef-grid-inner {

					> .qodef-grid-item {
						width: $column-width;
					}
				}

				&.qodef-responsive--predefined {

					> .qodef-grid-inner {

						> .qodef-grid-item {

							@if ($i > 0) {

								@media only screen and (min-width: map-get($grid-columns-layout-map, $step)) {

									&:nth-child(#{$step}n+1) {
										clear: both;
									}
								}
							}
						}
					}
				}

				&.qodef-responsive--custom {

					> .qodef-grid-inner {

						> .qodef-grid-item {

							@if ($i > 0) {

								@media only screen and (min-width: $screen-size-1441) {

									&:nth-child(#{$step}n+1) {
										clear: both;
									}
								}
							}
						}
					}
				}
			}
		}
	}

	&.qodef-layout--masonry {

		&.qodef-items--fixed {

			.qodef-grid-item {

				.qodef-e-inner {
					height: 100%;
					overflow: hidden;
				}

				img {
					height: 100%;
					width: 100%;
				}
			}
		}

		.qodef-grid-inner {
			visibility: hidden;

			&.qodef--masonry-init {
				visibility: visible;
			}
		}

		.qodef-grid-masonry-sizer {
			width: 100%;
			padding: 0;
			margin: 0;
		}

		.qodef-grid-masonry-gutter {
			width: 0;
			padding: 0;
			margin: 0;
		}

		@for $i from 0 to $grid-columns-layout-size {
			$step: $i + 1;

			&.qodef-col-num--#{$step} {
				$column-width: 100%/$step;

				.qodef-grid-masonry-sizer,
				> .qodef-grid-inner > .qodef-grid-item {
					width: $column-width;
				}

				@if ($i > 0) {

					> .qodef-grid-inner > .qodef-item--landscape,
					> .qodef-grid-inner > .qodef-item--huge-square {
						width: $column-width*2;
					}
				}
			}
		}
	}

	@for $i from 0 to length($grid-columns-gutter-label) {
		&.qodef-gutter--#{nth($grid-columns-gutter-label,$i+1)} {
			$gutter-size: nth($grid-columns-gutter-size, $i+1);
			$gutter-double-size: $gutter-size * 2;

			&.qodef--no-bottom-space {

				@if ($gutter-size == 0) {
					margin-bottom: 0;
				} @else {
					margin-bottom: -#{$gutter-double-size}px;
				}
			}

			> .qodef-grid-inner {

				@if ($gutter-size == 0) {
					margin: 0;
				} @else {
					margin: 0 -#{$gutter-size}px;
				}

				> .qodef-grid-item {

					@if ($gutter-size == 0) {
						padding: 0;
						margin: 0;
					} @else {
						padding: 0 #{$gutter-size}px;
						margin: 0 0 #{$gutter-double-size}px;
					}
				}
			}
		}
	}
}
